trigger: none

parameters:
  - name: repository_dependency
    type: string
    default: something
  - name: release_target
    type: string
    default: whatever
  - name: ignore_stage_failure
    type: boolean
    default: false
  - name: serversObjects
    type: object
    default:
      - server: 'HOST_3DSpace1'
        title: 'App Server 1'
        deployment_tasks: 'deployAll'
        wrap_deployment_instructions: 'true'
      - server: 'HOST_3DSpace2'
        title: 'App Server 2'
        deployment_tasks: 'only_Ctrlm only_Web'
        wrap_deployment_instructions: 'true'
        #in_sequence: 'true'
      - server: 'HOST_Integrations1'
        title: 'Integration Server Apps 1'
        deployment_tasks: 'only_Web'
        wrap_deployment_instructions: 'true'
        dependency: 'HOST_3DSpace1'
      - server: 'HOST_Integrations2'
        title: 'Integration Server Apps 2'
        deployment_tasks: 'only_Web'
        wrap_deployment_instructions: 'true'
        #in_sequence: 'true'
      - server: 'HOST_Widget'
        title: 'Widget Host server'
        deployment_tasks: 'only_Web deployWidget deployWidgetWeb'
        wrap_deployment_instructions: 'true'
        dependency: 'HOST_3DSpace1'
      - server: 'TEST_GROUP'
        title: 'Widget Host server'
        deployment_tasks: 'only_Web deployWidget deployWidgetWeb'
        wrap_deployment_instructions: 'true'
        dependency: 'HOST_3DSpace1'

variables:
- group: "New variable group 24-May"

pool:
  name: Default
  vmImage: 'LP15-U33-DSA'
  
stages:
  - stage: 'Check_runners'
    jobs:
    - job: checkRunnerHealth
      displayName: 'Check runner(s) are online'
      steps:
      - task: PowerShell@2
        displayName: 'query runner(s)'
        env:
            REPOSITORY_NAME: $(Build.Repository.Name) 
            SERVER_OBJECTS: ${{ convertToJson(parameters.serversObjects) }}
        inputs:
            targetType: 'inline'
            script: |
                # STEP 1: Loop through the parameters and extract the server names into a table
                $serverObjectsJson = ${env:SERVER_OBJECTS}
                $serversObjects = ConvertFrom-Json $serverObjectsJson

                $serverNames = @()
                $names = "azl-adln9371", "VM-U33-DSA", "unknown"
                
                foreach ($serverObject in $serversObjects) {
                    $serverName = $serverObject.server
                    $serverNames += [Environment]::GetEnvironmentVariable("$serverName")
                    
                    # You can perform further actions with the serverName here
                }
                Write-Host "REPOSITORY_NAME: ${env:REPOSITORY_NAME}"
                Write-Host "Server names: $serverNames"
                Write-Host "names: $names"
          